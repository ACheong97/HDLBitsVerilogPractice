module top_module (
    input clk,
    input reset,   // Synchronous active-high reset
    output [3:1] ena,
    output [15:0] q);
	
    //assert if 9,99,999
    assign ena = {q[11:8] == 4'd9 && q[7:4] == 4'd9 && q[3:0] == 4'd9, q[7:4] == 4'd9 && q[3:0] == 4'd9, q[3:0] == 4'd9};
    
    digit_counter ones(.clk(clk), .reset(reset), .ena(1), .q(q[3:0]));
    digit_counter tens(.clk(clk), .reset(reset), .ena(ena[1]), .q(q[7:4]));
    digit_counter hundreds(.clk(clk), .reset(reset), .ena(ena[2]), .q(q[11:8]));
    digit_counter thousands(.clk(clk), .reset(reset), .ena(ena[3]), .q(q[15:12]));
endmodule

module digit_counter (
    input clk,
    input reset,  
    input ena, //takes enable from top module
    output [3:0] q);
	
    always@(posedge clk)begin
        if(reset)begin
            q <= 4'd0;
        end
        else if(ena) begin
            if(q == 4'd9)
            	q <= 4'd0;
            else begin
            	q <= q+1;
            end 
        end
    end
endmodule
