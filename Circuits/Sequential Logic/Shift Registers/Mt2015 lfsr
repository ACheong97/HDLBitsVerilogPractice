module top_module (
	input [2:0] SW,      // R
	input [1:0] KEY,     // L and clk
	output [2:0] LEDR);  // Q

    wire d1, d3; 
    assign d3 = LEDR[1] ^ LEDR[2];
    
    muxdff first(.clk(KEY[0]), .L(KEY[1]), .r_in(SW[0]), .q_in(LEDR[2]), .Q(LEDR[0]));
    muxdff second(.clk(KEY[0]), .L(KEY[1]), .r_in(SW[1]), .q_in(LEDR[0]), .Q(LEDR[1])); 
    muxdff third(.clk(KEY[0]), .L(KEY[1]), .r_in(SW[2]), .q_in(d3), .Q(LEDR[2])); 
endmodule

module muxdff (
	input clk,
	input L,
	input r_in,
	input q_in,
	output reg Q);

    wire mux_res;
    
    assign mux_res = L ? r_in : q_in;
    
    always@(posedge clk)begin
        Q<=mux_res;
    end
   
endmodule
